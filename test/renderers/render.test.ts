import render from "../../src/renderers/render"
import { ContentType, Sys, Locale } from "contentful"

describe("render()", () => {
  it("renders given a content type", async () => {
    const contentTypes: ContentType[] = [
      {
        sys: {
          id: "myContentType",
        } as Sys,
        fields: [
          {
            id: "arrayField",
            name: "Array field",
            required: true,
            validations: [{}],
            items: {
              type: "Symbol",
              validations: [
                {
                  in: ["one", "of", "the", "above"],
                },
              ],
            },
            disabled: false,
            omitted: false,
            localized: false,
            type: "Array",
          },
        ],
        description: "",
        displayField: "",
        name: "",
        toPlainObject: () => ({} as ContentType),
      },
    ]

    const locales: Locale[] = [
      {
        name: "English (US)",
        fallbackCode: null,
        code: "en-US",
        default: true,
        sys: {} as Locale["sys"],
      },
      {
        name: "Brazilian Portuguese",
        fallbackCode: "en-US",
        code: "pt-BR",
        default: false,
        sys: {} as Locale["sys"],
      },
    ]

    expect(await render(contentTypes, locales, { compatibleWithRealResponses: false }))
      .toMatchInlineSnapshot(`
      "// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY IT.

      import { Asset, Entry, Sys } from \\"contentful\\"
      import { Document } from \\"@contentful/rich-text-types\\"

      export interface PatchedSys extends Sys {}

      export interface PatchedAsset extends Asset {}

      export interface PatchedEntrySys<T> {
        id: string
        type: string
        createdAt: string
        updatedAt: string
        locale: string
        contentType: {
          sys: {
            id: T
            linkType: \\"ContentType\\"
            type: \\"Link\\"
            [otherKey: string]: any
          }
        }
      }

      export interface PatchedEntry<T, I> {
        fields: Entry<T>[\\"fields\\"]
        sys: PatchedEntrySys<I>
      }

      export interface IMyContentTypeFields {
        /** Array field */
        arrayField: (\\"one\\" | \\"of\\" | \\"the\\" | \\"above\\")[]
      }

      export interface IMyContentType extends PatchedEntry<IMyContentTypeFields, \\"myContentType\\"> {}

      type CONTENT_TYPE = \\"myContentType\\"

      type LOCALE_CODE = \\"en-US\\" | \\"pt-BR\\"

      type CONTENTFUL_DEFAULT_LOCALE_CODE = \\"en-US\\"
      "
    `)
  })
})
